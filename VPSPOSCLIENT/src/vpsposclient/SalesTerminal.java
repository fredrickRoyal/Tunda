/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SalesTerminal.java
 *
 * Created on Mar 27, 2014, 7:15:38 PM
 */
package vpsposclient;

import java.awt.Color;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author Royal
 */
public class SalesTerminal extends javax.swing.JPanel {

    /** Creates new form SalesTerminal */
    ArrayList<Sale> salesList = new ArrayList<Sale>();
    static String total = "00";
    static String receiptId = new Controller().generateId();
    static boolean cleared = false;
    String dateNow = new Controller().getCurrentTimeStamp();
    String setDiscount;
    static String cashierName;
    static String cashierId;
    static ArrayList<Item> itemLine = new ArrayList<Item>();
    static ArrayList<String> searchList = new ArrayList<String>();
    static SearchItem searchItem;

    public SalesTerminal() {
        ArrayList<String> list = new ArrayList<String>();
        try {
            File file = new File("discount.txt");
            // if file doesnt exists, then create it
            if (!file.exists()) {
                file.createNewFile();
                FileWriter fw = new FileWriter(file.getAbsoluteFile());
                PrintWriter bw = new PrintWriter(fw);
                bw.println(0);
                bw.close();
            }
            FileReader fw = new FileReader(file.getAbsoluteFile());
            BufferedReader read = new BufferedReader(fw);
            while (true) {
                String line = read.readLine();
                if (line == null) {
                    break;
                } else {
                    list.add(line);
                }

            }
            setDiscount = list.get(0);
            read.close();
            fw.close();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());


        }
        try {
            salesTable.setModel(new Controller().getItem(salesList));
            
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
        initComponents();
        try{
            salesDate.setText(dateNow);
            cashier.setText(cashierName);
            salesDiscount.setText(setDiscount);
        }catch(Exception ex){
            System.out.println(ex.getMessage());
        
        }

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        expenditure = new javax.swing.JButton();
        totalCollection = new javax.swing.JButton();
        cashierSignOff = new javax.swing.JButton();
        addItemButton = new javax.swing.JButton();
        searchItemButton = new javax.swing.JButton();
        calenar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        itemId = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        itemQuantity = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        salesTotal = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        salesDate = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        cashier = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        salesDiscount = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        cashReceived = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        saleChange = new javax.swing.JTextField();
        addItem = new javax.swing.JButton();
        remove = new javax.swing.JButton();
        save = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        salesTable = new javax.swing.JTable();
        logout = new javax.swing.JLabel();

        expenditure.setFont(new java.awt.Font("Times New Roman", 0, 12));
        expenditure.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vpsposclient/images/expenditure.png"))); // NOI18N
        expenditure.setText("Expenditure");
        expenditure.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        expenditure.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        expenditure.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        expenditure.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expenditureActionPerformed(evt);
            }
        });

        totalCollection.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        totalCollection.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vpsposclient/images/totalcollection.png"))); // NOI18N
        totalCollection.setText("Collections");
        totalCollection.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        totalCollection.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        totalCollection.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        totalCollection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalCollectionActionPerformed(evt);
            }
        });

        cashierSignOff.setFont(new java.awt.Font("Times New Roman", 0, 12));
        cashierSignOff.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vpsposclient/images/signout2.png"))); // NOI18N
        cashierSignOff.setText("Sign Off");
        cashierSignOff.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cashierSignOff.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cashierSignOff.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cashierSignOff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cashierSignOffActionPerformed(evt);
            }
        });

        addItemButton.setFont(new java.awt.Font("Times New Roman", 0, 12));
        addItemButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vpsposclient/images/additem.png"))); // NOI18N
        addItemButton.setText("Add Item");
        addItemButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addItemButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addItemButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        addItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addItemButtonActionPerformed(evt);
            }
        });

        searchItemButton.setFont(new java.awt.Font("Times New Roman", 0, 12));
        searchItemButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vpsposclient/images/search.png"))); // NOI18N
        searchItemButton.setText("Search Item");
        searchItemButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        searchItemButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        searchItemButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchItemButtonActionPerformed(evt);
            }
        });

        calenar.setFont(new java.awt.Font("Times New Roman", 0, 12));
        calenar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vpsposclient/images/calenar.png"))); // NOI18N
        calenar.setText("Calendar");
        calenar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        calenar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        calenar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        calenar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calenarActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 18));
        jLabel1.setForeground(new java.awt.Color(0, 102, 255));
        jLabel1.setText("Item Code");

        itemId.setFont(new java.awt.Font("Times New Roman", 1, 18));
        itemId.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        itemId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                itemIdKeyPressed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 18));
        jLabel2.setForeground(new java.awt.Color(0, 102, 255));
        jLabel2.setText("Quantity");

        itemQuantity.setFont(new java.awt.Font("Times New Roman", 1, 18));
        itemQuantity.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        itemQuantity.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                itemQuantityFocusGained(evt);
            }
        });
        itemQuantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                itemQuantityKeyPressed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 18));
        jLabel3.setForeground(new java.awt.Color(0, 102, 255));
        jLabel3.setText("Total Amount");

        salesTotal.setBackground(new java.awt.Color(4, 14, 14));
        salesTotal.setEditable(false);
        salesTotal.setFont(new java.awt.Font("Times New Roman", 1, 24));
        salesTotal.setForeground(new java.awt.Color(153, 255, 102));
        salesTotal.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 18));
        jLabel4.setForeground(new java.awt.Color(0, 102, 255));
        jLabel4.setText("Date");

        salesDate.setBackground(new java.awt.Color(4, 14, 14));
        salesDate.setEditable(false);
        salesDate.setFont(new java.awt.Font("Times New Roman", 1, 24));
        salesDate.setForeground(new java.awt.Color(153, 255, 102));
        salesDate.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 18));
        jLabel5.setForeground(new java.awt.Color(0, 102, 255));
        jLabel5.setText("Cashier");

        cashier.setBackground(new java.awt.Color(4, 14, 14));
        cashier.setEditable(false);
        cashier.setFont(new java.awt.Font("Times New Roman", 1, 24));
        cashier.setForeground(new java.awt.Color(153, 255, 102));
        cashier.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 18));
        jLabel6.setForeground(new java.awt.Color(0, 102, 255));
        jLabel6.setText("Discount   ( %)");

        salesDiscount.setBackground(new java.awt.Color(4, 14, 14));
        salesDiscount.setEditable(false);
        salesDiscount.setFont(new java.awt.Font("Times New Roman", 1, 24));
        salesDiscount.setForeground(new java.awt.Color(153, 255, 102));
        salesDiscount.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jLabel7.setFont(new java.awt.Font("Times New Roman", 1, 18));
        jLabel7.setForeground(new java.awt.Color(0, 102, 255));
        jLabel7.setText("Cash Received");

        cashReceived.setFont(new java.awt.Font("Times New Roman", 1, 18));
        cashReceived.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        cashReceived.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cashReceivedFocusLost(evt);
            }
        });
        cashReceived.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cashReceivedKeyPressed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Times New Roman", 1, 18));
        jLabel8.setForeground(new java.awt.Color(0, 102, 255));
        jLabel8.setText("Balance");

        saleChange.setFont(new java.awt.Font("Times New Roman", 1, 18));
        saleChange.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        saleChange.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                saleChangeKeyPressed(evt);
            }
        });

        addItem.setFont(new java.awt.Font("Times New Roman", 0, 12));
        addItem.setText("Add Item");
        addItem.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addItemActionPerformed(evt);
            }
        });

        remove.setFont(new java.awt.Font("Times New Roman", 0, 12));
        remove.setText("Remove");
        remove.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeActionPerformed(evt);
            }
        });

        save.setFont(new java.awt.Font("Times New Roman", 0, 12));
        save.setText("Save Sale");
        save.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        salesTable.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        salesTable.setFont(new java.awt.Font("Times New Roman", 0, 14));
        salesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Item Code", "Item", "Quantity", "Unit Price", "Total"
            }
        ));
        salesTable.setGridColor(new java.awt.Color(208, 201, 201));
        salesTable.setRowHeight(28);
        salesTable.setSelectionBackground(new java.awt.Color(38, 112, 22));
        salesTable.setSelectionForeground(new java.awt.Color(250, 244, 244));
        jScrollPane1.setViewportView(salesTable);

        logout.setFont(new java.awt.Font("Times New Roman", 0, 14));
        logout.setForeground(new java.awt.Color(0, 0, 255));
        logout.setText("Logout");
        logout.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        logout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                logoutMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                logoutMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                logoutMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                logoutMousePressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1003, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(expenditure, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(totalCollection, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cashierSignOff, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addItemButton, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(searchItemButton, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(calenar, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
                                .addGap(207, 207, 207)
                                .addComponent(logout)
                                .addGap(180, 180, 180))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(itemId, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                                    .addComponent(cashReceived, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                                    .addComponent(salesDate, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(5, 5, 5)
                                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(saleChange, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
                                    .addComponent(cashier, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
                                    .addComponent(itemQuantity, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(18, 23, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(salesDiscount, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)
                                            .addComponent(salesTotal, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(addItem, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                                        .addGap(18, 18, 18)
                                        .addComponent(save, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                                        .addGap(18, 18, 18)
                                        .addComponent(remove, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)))))
                        .addGap(10, 10, 10))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(logout)
                    .addComponent(expenditure, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(totalCollection)
                    .addComponent(cashierSignOff)
                    .addComponent(addItemButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchItemButton)
                    .addComponent(calenar))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(itemId, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(itemQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(salesTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(salesDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(cashier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(salesDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cashReceived, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(saleChange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(remove, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(save, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addItem, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cashReceived, cashier, itemId, itemQuantity, saleChange, salesDate, salesDiscount, salesTotal});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {addItemButton, calenar, cashierSignOff, expenditure, searchItemButton, totalCollection});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {addItem, remove, save});

    }// </editor-fold>//GEN-END:initComponents

private void itemIdKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_itemIdKeyPressed
// TODO add your handling code here:
    java.awt.event.ActionEvent event = null;
    if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
        addItemActionPerformed(event);
    } else if (evt.getKeyCode() == KeyEvent.VK_F12) {
        try {
            SearchItem.model = new Controller().search("item", "all");
            searchItem = new SearchItem(Welcome.mainWindow, true);
            searchItem.setTitle("Search for Item");
            searchItem.setLocation(getWidth() / 10, getHeight() / 5);
            searchItem.setVisible(true);

        } catch (Exception e) {
        }

    }
    /*Navigation Method*/
    nextTab(evt);
}//GEN-LAST:event_itemIdKeyPressed

private void addItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addItemActionPerformed
// TODO add your handling code here:
    try {
        String id = itemId.getText();
        String quantity = itemQuantity.getText();
        String cashiers = cashierId;
        String dates = salesDate.getText();
        if (id.equalsIgnoreCase("") || id.equalsIgnoreCase(" ")) {
            JOptionPane.showMessageDialog(null, "Please Enter Item ID");
        } else if (quantity.equalsIgnoreCase("") || quantity.equalsIgnoreCase(" ")) {
            JOptionPane.showMessageDialog(null, "Please Enter Quantity");
        } else if (new Controller().isInteger(quantity) == false) {
            JOptionPane.showMessageDialog(null, "Please Enter Quantity as Number");
        } else {
            Sale sale = null;
            boolean found = false;
            if (salesList.isEmpty()) {
                /* do not compare the items in the salesList
                 * found will still be == false;
                 * therefore we perform actions at the end when found == false;
                 */
            } else {
                /*checking if the same item is being sold at the same time. 
                 * if its true that the same item is being sold, the we just update its quantity.
                 */
                for (int i = 0; i < salesList.size(); i++) {
                    if ((salesList.get(i).getItem()).equalsIgnoreCase(id)) {
                        salesList.get(i).setQuantity(Integer.parseInt(quantity) + salesList.get(i).getQuantity());
                        sale = new Sale(id, receiptId, Integer.parseInt(quantity), cashiers, dates);
                        if (new Controller().deductStock(sale) == true) {
                            new Controller().updatesoldItem(id, receiptId, salesList.get(i).getQuantity());
                            itemLine = new ArrayList<Item>();
                            salesTable.setModel(new Controller().getItem(salesList));
                        } else {
                            //salesList.remove(sale);
                        }
                        found = true;
                    }
                }

            }
            if (found == false) {
                sale = new Sale(id, receiptId, Integer.parseInt(quantity), cashiers, dates);
                salesList.add(sale);
                if (new Controller().deductStock(sale) == true) {
                    new Controller().saleItem(sale);
                    itemLine = new ArrayList<Item>();
                    salesTable.setModel(new Controller().getItem(salesList));
                } else {
                    salesList.remove(sale);
                }
            }
        }
        itemId.setText("");
        itemId.requestFocus();
    } catch (Exception ex) {
        System.out.println(ex.getMessage());
    }
}//GEN-LAST:event_addItemActionPerformed

private void itemQuantityFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_itemQuantityFocusGained
// TODO add your handling code here:
    try {
        itemQuantity.setText("1");
        itemQuantity.selectAll();
    } catch (Exception ex) {
        System.out.println(ex.getMessage());
    }
}//GEN-LAST:event_itemQuantityFocusGained

private void itemQuantityKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_itemQuantityKeyPressed
// TODO add your handling code here:
    java.awt.event.ActionEvent event = null;
    if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
        addItemActionPerformed(event);
    }
    /*Navigation Method*/
    nextTab(evt);
}//GEN-LAST:event_itemQuantityKeyPressed

private void cashReceivedFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cashReceivedFocusLost
// TODO add your handling code here:
    if ((cashReceived.getText().isEmpty() || cashReceived.getText().equalsIgnoreCase(" ")) && !(salesTotal.getText().isEmpty())) {
        JOptionPane.showMessageDialog(null, "Please Enter Cash Received");
    } else if ((new Controller().isInteger(cashReceived.getText()) == false) && !(salesTotal.getText().isEmpty())) {
        cashReceived.requestFocus(true);
        cashReceived.selectAll();
    } else {
        if ((new Controller().isInteger(cashReceived.getText()) == true)) {
            int cash = Integer.parseInt(cashReceived.getText());
            int totalSales = Integer.parseInt(new Controller().unformatCash(salesTotal.getText()));
            //saleChange.setText(Integer.toString(cash - totalSales));
            saleChange.setText(new Controller().formatCash(cash - totalSales));
            cashReceived.setText(new Controller().formatCash(cash));
        } else {
            //JOptionPane.showMessageDialog(null, "Enter Cash Received as Numbers");
        }

    }
}//GEN-LAST:event_cashReceivedFocusLost

private void cashReceivedKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cashReceivedKeyPressed
// TODO add your handling code here:
    java.awt.event.ActionEvent event = null;
    if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
        saleChange.requestFocus();
        saleChange.getCursor();
        //saveActionPerformed(event);
    } else if (evt.getKeyCode() == KeyEvent.VK_UP) {
        itemId.requestFocus();
    }
}//GEN-LAST:event_cashReceivedKeyPressed

private void saleChangeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_saleChangeKeyPressed
// TODO add your handling code here:
    java.awt.event.ActionEvent event = null;
    if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
        saveActionPerformed(event);
    }
}//GEN-LAST:event_saleChangeKeyPressed

private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
// TODO add your handling code here:
    try {
        if (cashReceived.getText().isEmpty() || cashReceived.getText().equalsIgnoreCase(" ")) {
            JOptionPane.showMessageDialog(null, "Please Enter Cash Received");
        } else if (new Controller().isInteger(cashReceived.getText()) == false) {
            JOptionPane.showMessageDialog(null, "Please Enter Cash Received as a Number");

        } else {
            total = salesTotal.getText();
            int discount = Integer.parseInt(salesDiscount.getText());
            int cash = Integer.parseInt(new Controller().unformatCash(cashReceived.getText()));
            int balanceDue = Integer.parseInt(new Controller().unformatCash(total));
            int change = Integer.parseInt(new Controller().unformatCash(saleChange.getText()));
            String date = salesDate.getText();
            salesList = null;
            salesTable.setModel(new Controller().getItem(salesList));
            new Controller().recordReceipt(new Receipt(receiptId, Integer.parseInt(new Controller().unformatCash(total)), discount, cash, balanceDue, change, date));
            //receiptId = new Controller().generateId();
            new Controller().generateReceipt(itemLine, receiptId, total + "=", cashReceived.getText() + "=", saleChange.getText() + "=", cashier.getText(), salesDate.getText());
            //TO ENABLE CASHIER TO CONTINUE WHEN DESIRED
            JOptionPane.showMessageDialog(null, "Press Enter To Continue...");

            itemId.setText("");
            itemQuantity.setText("1");
            salesTotal.setText("");
            saleChange.setText("");
            cashReceived.setText("");
            salesList = new ArrayList<Sale>();
            itemLine = new ArrayList<Item>();


        }
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(null, ex.getMessage());

    }

    itemId.requestFocus();
}//GEN-LAST:event_saveActionPerformed

private void removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeActionPerformed
// TODO add your handling code here:
    try {
        int row = salesTable.getSelectedRow();
        Object id = salesTable.getModel().getValueAt(row, 0);
        Object name = salesTable.getModel().getValueAt(row, 1);
        String quantity = JOptionPane.showInputDialog(null, "Enter Quantity to be REMOVED", "Delete Item from List", JOptionPane.QUESTION_MESSAGE);
        if (quantity == null) {
        } else {
            if (quantity.isEmpty() || quantity.equalsIgnoreCase("")) {
                JOptionPane.showMessageDialog(null, "Please Enter the quantity to be reduced from the Item");
            } else {
                if (new Controller().isInteger(quantity) == true) {
                    if (salesList.isEmpty()) {
                        /* do not compare the items in the salesList
                         */
                    } else {

                        /*Comparing id and reduce the item quantity appropriately
                         */
                        int newQuantity;
                        for (int i = 0; i < salesList.size(); i++) {
                            if ((salesList.get(i).getItem()).equalsIgnoreCase(id.toString())) {
                                newQuantity = salesList.get(i).getQuantity() - Integer.parseInt(quantity);

                                if (newQuantity == 0) {
                                    if (new Controller().removeItemFromSales(id.toString(), receiptId) == true) {
                                        salesList.remove(i);
                                    } else {
                                        /*dont indicate any change in the itemLine*/
                                    }
                                } else {
                                    if (new Controller().reAddStock(id.toString(), Integer.parseInt(quantity)) == true) {
                                        if (new Controller().deleteItemFromList(id.toString(), receiptId, newQuantity) == true) {
                                            /*indicate the change in the item line in the table*/
                                            salesList.get(i).setQuantity(newQuantity);
                                        } else {
                                            /*dont indicate the change in the item line in the table*/
                                        }
                                    } else {
                                        /*dont indicate the change in the item line in the table*/
                                    }


                                }
                            }
                        }
                        itemLine = new ArrayList<Item>();
                        salesTable.setModel(new Controller().getItem(salesList));

                    }

                } else {
                    JOptionPane.showMessageDialog(null, "Please Enter Quantity as a Number");
                }
            }

        }
    } catch (Exception e) {
        System.out.println(e.getMessage());
    }
}//GEN-LAST:event_removeActionPerformed

private void expenditureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expenditureActionPerformed
// TODO add your handling code here:
    ExpenditureViewDialog.expenditureDate = salesDate.getText();
    ExpenditureViewDialog expenditureDialog = new ExpenditureViewDialog(Welcome.mainWindow, true);
    expenditureDialog.setTitle("Record Yor Days Expenditure");
    expenditureDialog.setLocation(getWidth() / 4, getHeight() / 5);
    expenditureDialog.setVisible(true);
}//GEN-LAST:event_expenditureActionPerformed

private void totalCollectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalCollectionActionPerformed
// TODO add your handling code here:
    CashierTotalCollectionReport.date = this.salesDate.getText();
    CashierTotalCollectionReport totalCollectionReport = new CashierTotalCollectionReport(Welcome.mainWindow, true);
    totalCollectionReport.setTitle("Total Day Collection");
    totalCollectionReport.setLocation(getWidth() / 4, getHeight() / 7);
    totalCollectionReport.setVisible(true);
}//GEN-LAST:event_totalCollectionActionPerformed

private void cashierSignOffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cashierSignOffActionPerformed
// TODO add your handling code here:
    SignOffDialog.cashierId = cashierId;
    SignOffDialog.cashierName = cashierName;
    SignOffDialog signOffDialog = new SignOffDialog(Welcome.mainWindow, true);
    signOffDialog.setTitle("Sign Off");
    signOffDialog.setLocation(getWidth() / 4, getHeight() / 7);
    signOffDialog.setVisible(true);
}//GEN-LAST:event_cashierSignOffActionPerformed

private void addItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addItemButtonActionPerformed
// TODO add your handling code here:
    String id = itemId.getText();
    String quantity = itemQuantity.getText();
    String cashiers = cashierId;
    String dates = salesDate.getText();
    if (id.equalsIgnoreCase("") || id.equalsIgnoreCase(" ")) {
        JOptionPane.showMessageDialog(null, "Please Enter Item ID");
    } else if (quantity.equalsIgnoreCase("") || quantity.equalsIgnoreCase(" ")) {
        JOptionPane.showMessageDialog(null, "Please Enter Quantity");
    } else if (new Controller().isInteger(quantity) == false) {
        JOptionPane.showMessageDialog(null, "Please Enter Quantity as Number");
    } else {
        Sale sale = null;
        boolean found = false;
        if (salesList.isEmpty()) {
            /* do not compare the items in the salesList
             * found will still be == false;
             * therefore we perform actions at the end when found == false;
             */
        } else {
            /*checking if the same item is being sold at the same time. 
             * if its true that the same item is being sold, the we just update its quantity.
             */
            for (int i = 0; i < salesList.size(); i++) {
                if ((salesList.get(i).getItem()).equalsIgnoreCase(id)) {
                    salesList.get(i).setQuantity(Integer.parseInt(quantity) + salesList.get(i).getQuantity());
                    sale = new Sale(id, receiptId, Integer.parseInt(quantity), cashiers, dates);
                    if (new Controller().deductStock(sale) == true) {
                        new Controller().updatesoldItem(id, receiptId, salesList.get(i).getQuantity());
                        itemLine = new ArrayList<Item>();
                        salesTable.setModel(new Controller().getItem(salesList));
                    } else {
                        //salesList.remove(sale);
                    }
                    found = true;
                }
            }

        }
        if (found == false) {
            sale = new Sale(id, receiptId, Integer.parseInt(quantity), cashiers, dates);
            salesList.add(sale);
            if (new Controller().deductStock(sale) == true) {
                new Controller().saleItem(sale);
                itemLine = new ArrayList<Item>();
                salesTable.setModel(new Controller().getItem(salesList));
            } else {
                salesList.remove(sale);
            }
        }
    }
    itemId.setText("");
    itemId.requestFocus();
}//GEN-LAST:event_addItemButtonActionPerformed

private void searchItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchItemButtonActionPerformed
// TODO add your handling code here:
    try {
        SearchItem.model = new Controller().search("item", "all");
        searchItem = new SearchItem(Welcome.mainWindow, true);
        searchItem.setTitle("Search for Item");
        searchItem.setLocation(getWidth() / 10, getHeight() / 5);
        searchItem.setVisible(true);
    } catch (Exception ex) {
        System.out.println(ex.getMessage());
    }
}//GEN-LAST:event_searchItemButtonActionPerformed

private void calenarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calenarActionPerformed
// TODO add your handling code here:
    try {
        AccountsCalendar calendar = new AccountsCalendar(Welcome.mainWindow, true);
        calendar.setTitle("Reset Accounting Date");
        calendar.setLocation(getWidth() / 5, getHeight() / 5);
        calendar.setVisible(true);
    } catch (Exception ex) {
        System.out.println(ex.getMessage());

    }
}//GEN-LAST:event_calenarActionPerformed

private void logoutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logoutMouseClicked
// TODO add your handling code here:
    new Controller().logout();
}//GEN-LAST:event_logoutMouseClicked

private void logoutMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logoutMousePressed
// TODO add your handling code here:
    new Controller().logout();
}//GEN-LAST:event_logoutMousePressed

private void logoutMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logoutMouseEntered
// TODO add your handling code here:
    logout.setForeground(new Color(255, 204, 102));
}//GEN-LAST:event_logoutMouseEntered

private void logoutMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logoutMouseExited
// TODO add your handling code here:
    logout.setForeground(new Color(0, 0, 255));
}//GEN-LAST:event_logoutMouseExited
    public void nextTab(java.awt.event.KeyEvent evt) {
        if (itemId.hasFocus() && evt.getKeyCode() == KeyEvent.VK_RIGHT) {
            itemQuantity.setText("1");
            itemQuantity.requestFocus(true);
            itemQuantity.getCursor();

        } else if ((itemQuantity.hasFocus() || itemId.hasFocus()) && ((evt.getKeyCode() == KeyEvent.VK_RIGHT) || (evt.getKeyCode() == KeyEvent.VK_DOWN))) {
            cashReceived.requestFocus(true);
            cashReceived.getCursor();
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addItem;
    private javax.swing.JButton addItemButton;
    private javax.swing.JButton calenar;
    public static javax.swing.JTextField cashReceived;
    public static javax.swing.JTextField cashier;
    private javax.swing.JButton cashierSignOff;
    private javax.swing.JButton expenditure;
    public static javax.swing.JTextField itemId;
    public static javax.swing.JTextField itemQuantity;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel logout;
    private javax.swing.JButton remove;
    public static javax.swing.JTextField saleChange;
    public static javax.swing.JTextField salesDate;
    public static javax.swing.JTextField salesDiscount;
    public static javax.swing.JTable salesTable;
    public static javax.swing.JTextField salesTotal;
    private javax.swing.JButton save;
    private javax.swing.JButton searchItemButton;
    private javax.swing.JButton totalCollection;
    // End of variables declaration//GEN-END:variables
}
